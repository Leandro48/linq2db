using System;
using System.Collections.Generic;
using System.Globalization;
using LinqToDB.CodeGen.Model;

namespace LinqToDB.CodeGen.DataModel
{
	partial class DataModelGenerator
	{
		private CodeParameter DefineParameter(MethodBuilder method, ParameterModel model)
		{
			var parameter = _code.Parameter(model.Type, _code.Identifier(model.Name), model.Direction);
			method.Parameter(parameter);

			if (model.Description != null)
				method.XmlComment().Parameter(parameter.Name, model.Description);

			return parameter;
		}

		private ClassBuilder DefineClass(ClassModel model, ClassGroup classes)
		{
			var @class = classes.New(_code.Identifier(model.Name));

			if (model.IsPublic) @class.Public();
			if (model.IsStatic) @class.Static();
			if (model.IsPartial) @class.Partial();

			if (model.BaseType != null)
				@class.Inherits(model.BaseType);

			if (model.Summary != null)
				@class.XmlComment().Summary(model.Summary);

			return @class;
		}

		private PropertyBuilder DefineProperty(PropertyGroup propertyGroup, PropertyModel property)
		{
			var propertyBuilder = propertyGroup.New(_code.Identifier(property.Name, null/* TODO: ctxModel.EntityColumn*/, propertyGroup.Members.Count + 1), property.Type);

			if (property.IsPublic)
				propertyBuilder.Public();

			if (property.IsDefault)
				propertyBuilder.Default(property.HasSetter);

			if (property.Summary != null)
				propertyBuilder.XmlComment().Summary(property.Summary);


			if (property.TrailingComment != null)
				propertyBuilder.TrailingComment(property.TrailingComment);

			return propertyBuilder;
		}

		private MethodBuilder DefineMethod(MethodGroup methods, MethodModel model, bool extension)
		{
			var builder = methods.New(_code.Identifier(model.Name));

			if (model.Public) builder.Public();
			if (model.Static) builder.Static();
			if (model.Partial) builder.Partial();
			if (extension) builder.Extension();

			if (model.Summary != null)
				builder.XmlComment().Summary(model.Summary);

			return builder;
		}

		private void NormalizeFileNames()
		{
			var fileNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

			foreach (var (file, _) in _files.Values)
			{
				var fileName = file.FileName;
				var cnt = 0;

				while (!fileNames.Add(fileName))
				{
					cnt++;
					fileName = file.FileName + cnt.ToString(NumberFormatInfo.InvariantInfo);
				}

				file.FileName = fileName;
			}
		}

		private void DefineFile(string fileName)
		{
			var file = _code.File(fileName);
			_files.Add(fileName, (file, new()));

			if (_dataModel.AutoGeneratedComment != null)
			{
				// note that roslyn compiler disables NRT for files for backward compatibility and they should be re-enabled explicitly
				file.Header.Add(_code.Commentary("---------------------------------------------------------------------------------------------------", false));
				file.Header.Add(_code.Commentary("<auto-generated>", false));
				file.Header.Add(_code.Commentary(_dataModel.AutoGeneratedComment, false));
				file.Header.Add(_code.Commentary("</auto-generated>", false));
				file.Header.Add(_code.Commentary("---------------------------------------------------------------------------------------------------", false));
			}

			// configure compiler options
			if (_dataModel.DisableXmlDocWarnings)
				file.Add(_code.DisableWarnings(_languageProvider.MissingXmlCommentWarnCodes));

			if (_dataModel.NRTEnabled && _dataModel.AutoGeneratedComment != null)
				file.Add(_code.EnableNullableReferenceTypes());

			if (_dataModel.DisableXmlDocWarnings || (_dataModel.NRTEnabled && _dataModel.AutoGeneratedComment != null))
				file.Add(_code.NewLine);
		}

		private (ClassBuilder builder, ClassGroup group) DefineFileClass(ClassModel model)
		{
			if (!_files.TryGetValue(model.FileName!, out var file))
			{
				DefineFile(model.FileName!);
			}

			file = _files[model.FileName!];

			var ns = model.Namespace ?? string.Empty;
			if (!file.classesPerNamespace.TryGetValue(ns, out var classes))
			{
				if (model.Namespace != null)
				{
					var nsBuilder = _code.Namespace(model.Namespace);
					file.file.Add(nsBuilder.Namespace);
					file.classesPerNamespace.Add(model.Namespace, classes = nsBuilder.Classes());
				}
				else
				{
					file.classesPerNamespace.Add(string.Empty, classes = new ClassGroup(null));
					file.file.Add(classes);
				}
			}

			return (DefineClass(model, classes), classes);
		}
	}
}
